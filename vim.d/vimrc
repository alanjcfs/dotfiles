set nocompatible

filetype off
syntax off



call plug#begin('~/.vim/bundle')
let s:plugfile = '~/.files/vim.d/plugs.vim'
if filereadable(expand(s:plugfile))
  exec "source " . s:plugfile
endif
" TODO: Install local or vim specific plugs
call plug#end()



filetype plugin indent on
syntax enable



if !exists('g:loaded_matchit') && findfile('plugin/matchit.vim', &rtp) ==# ''
  runtime! macros/matchit.vim " Vim Built-in Plugins
endif



" Global Vim settings

let s:sharedfile = '~/.files/vim.d/settings.vim'
if filereadable(expand(s:sharedfile))
  exec "source " . s:sharedfile
endif



" Vim distribution-specific settings

if exists('$TMUX')
  set ttymouse=xterm2
endif

set autoindent backspace=indent,eol,start
set clipboard^=unnamed,unnamedplus
set colorcolumn=80 nocursorline
set confirm
set display+=lastline
set encoding=utf-8
set formatoptions+=j
set hidden
if &history < 1000
  set history=1000
endif
set hlsearch incsearch
set ignorecase smartcase
set laststatus=2
set lazyredraw
set list listchars+=tab:»·,trail:·,nbsp:+,extends:>,precedes:< listchars-=eol:$
set modelines=0
set nogdefault
set noshowmatch
set nostartofline
set number norelativenumber
set ruler
set scrolloff=3
set shell=$SHELL\ -l
set showcmd
set showmode
set splitright splitbelow
set synmaxcol=3000
if &tabpagemax < 50
  set tabpagemax=50
endif
set ttyfast
set undofile
set visualbell
set wildmenu wildignore+=*/tmp/* wildmode=list:longest,full
set wrap



" Folding
set foldenable foldlevelstart=10 foldnestmax=10 foldmethod=indent



" Global indentation characters
set expandtab noshiftround shiftwidth=2 smarttab softtabstop=2 tabstop=4



" Vim directories for backup, swap, and undo

set backupdir=~/.vim/tmp/backup//
set directory=~/.vim/tmp/swap//
set undodir=~/.vim/tmp/undo//

if !isdirectory(expand(&undodir))
  call mkdir(expand(&undodir), "p")
endif
if !isdirectory(expand(&backupdir))
  call mkdir(expand(&backupdir), "p")
endif
if !isdirectory(expand(&directory))
  call mkdir(expand(&directory), "p")
endif



" Quickly time out on keycodes, but never time out on mappings
" NOTE: Causes NeoVim to insert special characters when using the ESC key.
" set notimeout ttimeout ttimeoutlen=200



if has("vms")
  set nobackup		" do not keep a backup file, use versions instead
else
  set backup		" keep a backup file
endif


""""""""""""""""""""""""""""""""""""""""""""""""""
" Grab bags
""""""""""""""""""""""""""""""""""""""""""""""""""



" Colorscheme

try
  set background=dark " dark | light "
  silent! colorscheme badwolf
endtry
""""""""""""""""""""""""""""""""""""""""""""""""""



" Only do this part when compiled with support for autocommands.
if has("autocmd")

  " Enable file type detection.
  " Use the default filetype settings, so that mail gets 'tw' set to 72,
  " 'cindent' is on in C files, etc.
  " Also load indent files, to automatically do language-dependent indenting.
  " Put these in an autocmd group, so that we can delete them easily.
  augroup vimrcEx
    au!

    " When editing a file, always jump to the last known cursor position.
    " Don't do it when the position is invalid or when inside an event handler
    " (happens when dropping a file on gvim).
    " Also don't do it when the mark is in the first line, that is the default
    " position when opening a file.
    autocmd BufReadPost *
          \ if line("'\"") > 1 && line("'\"") <= line("$") |
          \   exe "normal! g`\"" |
          \ endif

    au BufEnter Makefile setlocal noexpandtab tabstop=8 shiftwidth=8

    " Filetype
    au BufRead,BufNewFile *.md,*.markdown setl filetype=markdown
    au BufRead,BufNewFile *.adoc,*.asciidoc setl syntax=asciidoc textwidth=80 | Pencil
    au BufRead,BufNewFile *.ldgr setl noexpandtab tabstop=8 shiftwidth=8 softtabstop=8
    au BufRead,BufNewFile *.es6 setl filetype=javascript

    " Text
    au FileType gitcommit setl textwidth=72
    au FileType gitconfig setl noexpandtab tabstop=8 shiftwidth=8 textwidth=80
    au FileType markdown setl textwidth=80 omnifunc=htmlcomplete#CompleteTags
    au FileType text setl noexpandtab tabstop=8 shiftwidth=8 textwidth=80

    " Code
    au FileType css setl omnifunc=csscomplete#CompleteCSS
    au FileType elm setl tabstop=4 shiftwidth=4 softtabstop=4
    au FileType html setl noexpandtab softtabstop=4 tabstop=4 shiftwidth=4
          \ omnifunc=htmlcomplete#CompleteTags listchars-=tab:»·
    au FileType javascript setl omnifunc=javascriptcomplete#CompleteJS
    au FileType python setl omnifunc=pythoncomplete#Complete
    au FileType ruby setl omnifunc=rubycomplete#Complete | set re=1
    au FileType rust setl softtabstop=2 tabstop=4 shiftwidth=4
    au FileType sh setl softtabstop=2 tabstop=4 shiftwidth=4
    au FileType xml setl omnifunc=xmlcomplete#CompleteTags noexpandtab tabstop=8 shiftwidth=8

    " au BufRead,BufEnter ~/Tuna/* setl tabstop=2 shiftwidth=2
  augroup END
endif " has("autocmd")



" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
" Only define it when not defined already.
if !exists(":DiffOrig")
  command DiffOrig vert new | set bt=nofile | r ++edit # | 0d_ | diffthis
      \ | wincmd p | diffthis endif
endif

" vim:set ft=vim et sw=2
