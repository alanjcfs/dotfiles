set nocompatible

filetype off
syntax off



call plug#begin('~/.vim/bundle')
" Themes & Colorschemes
Plug 'altercation/vim-colors-solarized'
Plug 'sjl/badwolf'
Plug 'quanganhdo/grb256'
Plug 'ajh17/Spacegray.vim'

" Fuzzysearch & Autocomplete
Plug 'ctrlpvim/ctrlp.vim'
Plug 'FelikZ/ctrlp-py-matcher'
Plug 'JazzCore/ctrlp-cmatcher', { 'do': 'CFLAGS=-Qunused-arguments CPPFLAGS=-Qunused-arguments ./install.sh' }
Plug 'mileszs/ack.vim'
Plug 'Valloric/YouCompleteMe', { 'do': './install.py --clang-completer --tern-completer --racer-completer' } " <tab> doesn't work

" Syntax
Plug 'avh4/elm-format', { 'for': 'elm'}
Plug 'elmcast/elm-vim', { 'for': 'elm'}
Plug 'dagwieers/asciidoc-vim', { 'for': ['asciidoc', 'txt'] }
Plug 'mattn/emmet-vim', { 'for': ['html', 'xml'] }
Plug 'racer-rust/vim-racer'
Plug 'scrooloose/syntastic'
Plug 'sheerun/vim-polyglot'
Plug 'SirVer/ultisnips'

" Writing
Plug 'reedes/vim-pencil', { 'for': 'markdown' }
Plug 'tpope/vim-markdown', { 'for': 'markdown' }
Plug 'nelstrom/vim-markdown-folding', { 'for': 'markdown' }

" Plug 'vim-airline/vim-airline'

" Code Editing
Plug 'honza/vim-snippets'
Plug 'junegunn/vim-easy-align'
Plug 'majutsushi/tagbar'
" Plug 'Raimondi/delimitMate'
Plug 'jiangmiao/auto-pairs'
Plug 'scrooloose/nerdtree'
Plug 'sjl/gundo.vim'
Plug 'tomtom/tcomment_vim'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-tbone'
Plug 'tpope/vim-unimpaired'
Plug 'xolox/vim-easytags'
Plug 'xolox/vim-misc'

" Git
Plug 'tpope/vim-fugitive'
Plug 'jreybert/vimagit'

" Ruby
Plug 'sunaku/vim-ruby-minitest'
Plug 'tpope/vim-endwise'
Plug 'tpope/vim-rake'

" Miscellaneous
Plug 'airblade/vim-gitgutter'
Plug 'christoomey/vim-tmux-navigator'

call plug#end()



filetype plugin indent on
syntax enable



if !exists('g:loaded_matchit') && findfile('plugin/matchit.vim', &rtp) ==# ''
  runtime! macros/matchit.vim " Vim Built-in Plugins
endif



set autoindent
set backspace=indent,eol,start
set clipboard^=unnamed,unnamedplus
set colorcolumn=80
set confirm
set display+=lastline
set encoding=utf-8
set formatoptions+=j
set hidden
if &history < 1000
  set history=1000
endif
set hlsearch
set ignorecase
set incsearch
set laststatus=2
set lazyredraw
set list
set listchars+=tab:»·,trail:·,nbsp:+,extends:>,precedes:<
set listchars-=eol:$
set modelines=0
set mouse=a
set nocursorline
set nogdefault
set norelativenumber
set noshowmatch
set nostartofline
set number
set ruler
set scrolloff=3
set shell=$SHELL\ -l
set showcmd
set showmode
set smartcase
set splitright splitbelow
set synmaxcol=3000
if &tabpagemax < 50
  set tabpagemax=50
endif
set ttyfast
set undofile
set visualbell
set wildignore+=*/tmp/*
set wildmenu
set wildmode=list:longest,full
set wrap



" Folding
set foldenable
set foldlevelstart=10
set foldnestmax=10
set foldmethod=indent



" Global indentation characters
set expandtab
set noshiftround
set shiftwidth=2
set smarttab
set softtabstop=2
set tabstop=4



" Vim directories for backup, swap, and undo

set backupdir=~/.vim/tmp/backup//
set directory=~/.vim/tmp/swap//
set undodir=~/.vim/tmp/undo//

if !isdirectory(expand(&undodir))
  call mkdir(expand(&undodir), "p")
endif
if !isdirectory(expand(&backupdir))
  call mkdir(expand(&backupdir), "p")
endif
if !isdirectory(expand(&directory))
  call mkdir(expand(&directory), "p")
endif



" Quickly time out on keycodes, but never time out on mappings
" NOTE: Causes NeoVim to insert special characters when using the ESC key.
" set notimeout ttimeout ttimeoutlen=200



if has("vms")
  set nobackup		" do not keep a backup file, use versions instead
else
  set backup		" keep a backup file
endif


""""""""""""""""""""""""""""""""""""""""""""""""""
" Grab bags
""""""""""""""""""""""""""""""""""""""""""""""""""



" Fugitive Statusline
" (Currently using vim-airline)
set statusline=%<%f\ %h%m%r%{fugitive#statusline()}%=%-14.(%l,%c%V%)\ %P
" let g:airline#extensions#tabline#enabled = 1


""""""""""""""""""""""""""""""""""""""""""""""""""
" Status line with syntastic settings
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:elm_syntastic_show_warnings = 1

let g:syntastic_javascript_checks = ['jshint']
let g:syntastic_filetype_map = { 'handlebars.html': 'handlebars' }
""""""""""""""""""""""""""""""""""""""""""""""""""



" Racer completer

let g:racer_cmd = "$HOME/.cargo/bin/racer"
let g:racer_experimental_completer = 1

let g:ackprg = 'rg --vimgrep --smart-case'



" CtrlP Config

let g:ctrlp_custom_ignore =
      \ { 'dir': '\m\C/(node_modules|target|dist)'
      \ , 'file': '\m\C\.(exe|png|jpg|gif|psd|pdf|map)$'
      \ , 'link': ''
      \ }



" Ack/RipGrep

if executable('rg')
  let g:ctrlp_user_command = 'rg %s -l --files --color=never --glob ""'
                          "  'rg %s -l --files ""'
endif
" let g:ctrlp_match_func = { 'match': 'matcher#cmatch' }
let g:ctrlp_match_func = { 'match': 'pymatcher#PyMatch' }



" GitGutter config

let g:gitgutter_eager = 0 " GitGutterCustomisation



" EasyTags

set tags+=.git/tags
let g:easytags_auto_highlight = 0
let g:easytags_async = 1



" Elm Format

let g:elm_format_autosave = 1



" Polyglot
let g:polyglot_disabled = ['elm']



" Ultisnips

let g:UltiSnipsExpandTrigger = "<C-T>"



" YCM

let g:ycm_collect_identifiers_from_tags_files = 1
let g:ycm_semantic_triggers = {
      \ 'elm' : ['.'],
      \ }



" Colorscheme

try
  set background=dark " dark | light "
  silent! colorscheme badwolf
endtry
""""""""""""""""""""""""""""""""""""""""""""""""""



" Only do this part when compiled with support for autocommands.
if has("autocmd")

  " Enable file type detection.
  " Use the default filetype settings, so that mail gets 'tw' set to 72,
  " 'cindent' is on in C files, etc.
  " Also load indent files, to automatically do language-dependent indenting.
  " Put these in an autocmd group, so that we can delete them easily.
  augroup vimrcEx
    au!

    " When editing a file, always jump to the last known cursor position.
    " Don't do it when the position is invalid or when inside an event handler
    " (happens when dropping a file on gvim).
    " Also don't do it when the mark is in the first line, that is the default
    " position when opening a file.
    autocmd BufReadPost *
          \ if line("'\"") > 1 && line("'\"") <= line("$") |
          \   exe "normal! g`\"" |
          \ endif

    au BufEnter Makefile setlocal noexpandtab tabstop=8 shiftwidth=8

    " Filetype
    au BufRead,BufNewFile *.md,*.markdown setl filetype=markdown
    au BufRead,BufNewFile *.adoc,*.asciidoc setl syntax=asciidoc textwidth=80 | Pencil
    au BufRead,BufNewFile *.ldgr setl noexpandtab tabstop=8 shiftwidth=8 softtabstop=8
    au BufRead,BufNewFile *.es6 setl filetype=javascript

    " Text
    au FileType gitcommit setl textwidth=72
    au FileType gitconfig setl noexpandtab tabstop=8 shiftwidth=8 textwidth=80
    au FileType markdown setl textwidth=80 omnifunc=htmlcomplete#CompleteTags
    au FileType text setl noexpandtab tabstop=8 shiftwidth=8 textwidth=80

    " Code
    au FileType css setl omnifunc=csscomplete#CompleteCSS
    au FileType elm setl tabstop=4 shiftwidth=4 softtabstop=4
    au FileType html setl noexpandtab softtabstop=4 tabstop=4 shiftwidth=4
          \ omnifunc=htmlcomplete#CompleteTags listchars-=tab:»·
    au FileType javascript setl omnifunc=javascriptcomplete#CompleteJS
    au FileType python setl omnifunc=pythoncomplete#Complete
    au FileType ruby setl omnifunc=rubycomplete#Complete | set re=1
    au FileType rust setl softtabstop=2 tabstop=4 shiftwidth=4
    au FileType sh setl softtabstop=2 tabstop=4 shiftwidth=4
    au FileType xml setl omnifunc=xmlcomplete#CompleteTags noexpandtab tabstop=8 shiftwidth=8

    " au BufRead,BufEnter ~/Tuna/* setl tabstop=2 shiftwidth=2
  augroup END
endif " has("autocmd")



" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
" Only define it when not defined already.
if !exists(":DiffOrig")
  command DiffOrig vert new | set bt=nofile | r ++edit # | 0d_ | diffthis
      \ | wincmd p | diffthis endif
endif



" Corrections and expansions

iabbrev @@    alan@atomsign.net
iabbrev adn and
iabbrev teh the
abbrev ccopy  Copyright 2013 Alan Fung-Schwarz, all rights reserved.



" ------------------------------------------------
" Mappings

" Map Y to act like D and C, to yank from cursor to EOL rather than yy.
map Y y$

" Don't use Ex mode, use Q for formatting
map Q gq

" CTRL-U in insert mode deletes a lot.  Use CTRL-G u to first break undo,
" so that you can undo CTRL-U after inserting a line break.
inoremap <C-U> <C-G>u<C-U>

" Escape using jk
inoremap jk <esc>

" Plugins
nnoremap <leader>a :Ack!<space>
nnoremap <leader>b :TagbarToggle<cr>
nnoremap <leader>n :NERDTreeToggle<cr>
nnoremap <leader>u :GundoToggle<cr>

" Vim customizations
nnoremap <leader><space> :noh<cr>
nnoremap <leader>cd :cd %:p:h<cr>
nnoremap <leader>ev :split $MYVIMRC<cr>
nnoremap <leader>sv :source $MYVIMRC<cr>
nnoremap <leader>l :ls<cr>:b<space>

" Git
nnoremap <leader>g :Git<space>
nnoremap <leader>gb :Gblame<space>
nnoremap <leader>gc :Gcommit -v<space>
nnoremap <leader>gd :Gdiff<space>
nnoremap <leader>gl :Glog -p<cr>
nnoremap <leader>gw :Gwrite<cr>

" Move lines
nnoremap <leader>j :m+<cr>==
nnoremap <leader>k :m-2<cr>==
xnoremap <leader>j :m'>+<cr>gv=gv
xnoremap <leader>k :m-2<cr>gv=gv

nnoremap <leader>rc :!rubocop %<cr>
" End Leader key mappings """"""""""""""""""""""""

xmap ga <Plug>(EasyAlign)
nmap ga <Plug>(EasyAlign)

" Source other local vimrc files, if any
" if filereadable(glob('$ROOT/vimrc.local'))
"   source $ROOT/vimrc.local
" endif

" vim:set ft=vim et sw=2
